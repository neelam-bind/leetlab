generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hint        String?
  editorial   String?

  testCases         Json
  codeSnippets      Json
  referenceSolution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Submission {
  id           String  @id @default(uuid())
  userId       String
  problemId    String
  sourceCode   Json
  language     String
  stdin        String
  stdout       String
  stderr       String
  memory       String?
  time         String?
  comileOutput String
  status       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCaseResult testCaseResult[]
}

model testCaseResult {
  id             String  @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String
  expected       String
  stderr         String
  compilerOutput String
  memory         String?
  time           String?
  status         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
